/*
 * BlinkMKnobCylon -- 
 *
 *
 *
 * 2008 Tod E. Kurt, http://thingm.com/
 *
 */

#include "Wire.h"
#include "BlinkM_funcs.h"

#define debug 1

int ledPin = 13;

#define num_knobs 3

typedef struct _knob {
  uint8_t clkpin; 
  uint8_t datpin;
  uint8_t clklast;
  uint8_t val;
} knob;

knob knobs[num_knobs] = {
  { 2,3, 0, 0},  // knob 0 
  { 4,5, 0, 0},  // knob 1 
  { 6,7, 0, 0x7f},  // knob 2 
};

#define red_knob 2
#define grn_knob 1
#define blu_knob 0

#define num_blinkms 10
#define max_t2  50

byte blinkm_addrs[num_blinkms];
byte curr_blinkm = 0;
int incdec = 1;  // only +1 or -1
byte t1;
int t2=max_t2;

void toggleLed() {
  digitalWrite( ledPin, digitalRead(ledPin)==HIGH ? LOW : HIGH );

}

static void knobs_init(void)
{
  for( int i=0; i<num_knobs; i++ ) {
    pinMode( knobs[i].clkpin, INPUT );
    pinMode( knobs[i].datpin, INPUT );
    // turn on internal pullup resistors so we don't need external ones
    digitalWrite( knobs[i].clkpin, HIGH);
    digitalWrite( knobs[i].datpin, HIGH);
  }
 
}

// this function must be called as quickly and as regularly as possible
static void knobs_poll(void)
{
  byte c,d;  // holder for readings
  for( byte i=0; i<num_knobs; i++ ) {
    knob k = knobs[i];           // get a knob
    c = digitalRead( k.clkpin ); // read its pins
    d = digitalRead( k.datpin );
    if( c != k.clklast  ) {      // look for clk line transition
      d = c^d;                   // xor gives us direction
      if( d ) k.val++;           // non-zero means clockwise rotation
      else k.val--;              // zero means counter-clockwise rotation
      k.clklast = c;             // save the clk pin's state
      knobs[i] = k;              // save our changes
    }
  }
}

// turn sawtooth into ramp
static byte knobs_fixval(byte b) {
  return (b<128) ? 2*b : 2*(255-b);
  //  return (b<85) ? 3*b : ((b<2*85) ? 3*(2*85-b) : 3*((3*85)-b));
}

void setup()
{
  Serial.begin(19200);

  //Use ledPin to flash when we get stuff
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, HIGH);

  knobs_init();

  BlinkM_begin();

  for( int i=0; i<num_blinkms; i++) {
    BlinkM_stopScript( blinkm_start_addr + i );
    BlinkM_fadeToRGB( blinkm_start_addr + i, 0,0,0); // fade to black
  }

  Serial.print("BlinkMKnobCylon ready\n");
}


// every loop poll knobs
// when t1 rolls over, update blinkm
// when t2 rolls over, move to next blinkm 
void loop()
{
  knobs_poll();

  t1++;
  if( t1==0 ) {     // t1 has rolled over, update LED
    byte r = knobs[red_knob].val;
    byte g = knobs[grn_knob].val;
    byte b = knobs[blu_knob].val;

    byte rf = knobs_fixval(r);
    byte gf = knobs_fixval(g);
    byte bf = knobs_fixval(b);

    // simple rgb LED output to verify
    analogWrite( 9, rf);
    analogWrite(10, gf);
    analogWrite(11, bf);

    BlinkM_setRGB( 0, rf,gf,bf );

    // move to next LED
    t2--;
    if( t2==0 ) {   // t2 has rolled over, do cylon thing
      t2 = max_t2;
      toggleLed();

      // debug
      if( debug ) {
	Serial.print("r,g,b:");
	Serial.print(r,HEX);Serial.print(",");
	Serial.print(g,HEX);Serial.print(",");
	Serial.print(b,HEX);Serial.println();
	Serial.print("curr_blinkm:"); Serial.println(curr_blinkm,DEC);
      }

      // slowly become evil again
      if( knobs[red_knob].val != 128 ) knobs[red_knob].val+=1;
      if( knobs[grn_knob].val != 0   ) knobs[grn_knob].val-=1;
      if( knobs[blu_knob].val != 0   ) knobs[blu_knob].val-=1;

      // prepare to move to the next cylon eye element
      curr_blinkm = curr_blinkm + incdec;
      if( incdec == 1 && curr_blinkm == num_blinkms-1 )
	incdec = -1;
      else if( incdec == -1 && curr_blinkm == 0 )
	incdec = 1;
    }

  }
}

